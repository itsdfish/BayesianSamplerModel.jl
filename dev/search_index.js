var documenterSearchIndex = {"docs":
[{"location":"api/","page":"API","title":"API","text":"Modules = [BayesianSamplerModel]\nOrder   = [:type, :function]\nPrivate = false","category":"page"},{"location":"api/#BayesianSamplerModel.BSM","page":"API","title":"BayesianSamplerModel.BSM","text":"BSM{T<:Real} <: AbstractBSM\n\nA model object for the Bayesian sampler.\n\nParameters\n\nθs::AbstractArray{T,N}: an array of true subjective probabilities. The array can be of any size and dimension. \nβ::T: parameter for symmetrical beta prior \nn::Int: number of samples for marginal and conditional events \nn′::Int: number of samples for conjunctions and disjunctions where n′ ≤ n\n\nConstructors\n\nBSM(Θs, β, n, n′)\n\nBSM(; Θs, β, n, n′)\n\nExample\n\nusing BayesianSamplerModel\nΘs = [.25 .15; .3 .3]\nmodel = BSM(; Θs, β=1.0, n=20, n′=10)\np_a = compute_marginal(model, sum(Θs[1,:]))\np_ab = compute_joint(model, Θs[1])\np_agb = compute_conditional(model, sum(Θs[1]) / sum(Θs[:,1]))\n\nReferences\n\nZhu, J. Q., Sanborn, A. N., & Chater, N. (2020). The Bayesian sampler: Generic Bayesian inference causes incoherence in human probability judgments. Psychological Review, 127(5), 719.\n\n\n\n\n\n","category":"type"},{"location":"api/#BayesianSamplerModel.compute_conditional-Tuple{AbstractBSM, Any}","page":"API","title":"BayesianSamplerModel.compute_conditional","text":"compute_conditional(m::AbstractBSM, θ)\n\nCompute the mean conditional posterior probability judgment for the Bayesian Sampler Model. \n\nArguments\n\nm::AbstractBSM: an object for the Bayesian Sampler Model\nθ: the true subjective probability \n\n\n\n\n\n","category":"method"},{"location":"api/#BayesianSamplerModel.compute_joint-Tuple{AbstractBSM, Any}","page":"API","title":"BayesianSamplerModel.compute_joint","text":"compute_joint(m::AbstractBSM, θ)\n\nCompute the mean marginal posterior probability judgment for the Bayesian Sampler Model. \n\nArguments\n\nm::AbstractBSM: an object for the Bayesian Sampler Model\nθ: the true subjective probability \n\n\n\n\n\n","category":"method"},{"location":"api/#BayesianSamplerModel.compute_marginal-Tuple{AbstractBSM, Any}","page":"API","title":"BayesianSamplerModel.compute_marginal","text":"compute_marginal(m::AbstractBSM, θ)\n\nCompute the mean marginal posterior probability judgment for the Bayesian Sampler Model. \n\nArguments\n\nm::AbstractBSM: an object for the Bayesian Sampler Model\nθ: the true subjective probability \n\n\n\n\n\n","category":"method"},{"location":"example1/#Bayesian-Sampler-Example","page":"Example 1","title":"Bayesian Sampler Example","text":"","category":"section"},{"location":"example1/","page":"Example 1","title":"Example 1","text":"In the example below, we will develop a simple Bayesian Sampler model of marginal and joint probability judgments. The first step will be to load BayesianSampler and Component arrays into the sessesion.","category":"page"},{"location":"example1/","page":"Example 1","title":"Example 1","text":"using BayesianSamplerModel\nusing ComponentArrays","category":"page"},{"location":"example1/#Model-Setup","page":"Example 1","title":"Model Setup","text":"","category":"section"},{"location":"example1/","page":"Example 1","title":"Example 1","text":"The first step of making a model is to define the joint distribution for events a and b. There are  different approaches one could take. For example, one could define a 2\\times 2 array, which would be convienent for computing marginals. Another way which is convienent for using a Dirichlet prior is to use a vector. One drawback is that the indices of the vector does not have an inherent meaning. ComponentArrays circumvent this problem by allowing both integer and keyword based indexing. The joint distribution is defined as:","category":"page"},{"location":"example1/","page":"Example 1","title":"Example 1","text":"Θs = ComponentArray(ab=.25, anb=.15, nab=.3, nanb=.3)","category":"page"},{"location":"example1/","page":"Example 1","title":"Example 1","text":"Next, we can define the model object by passing the joint distribution and other paremeters. ","category":"page"},{"location":"example1/","page":"Example 1","title":"Example 1","text":"model = BSM(; Θs, β=1.0, n=10, n′=10)","category":"page"},{"location":"example1/#Model-Functions","page":"Example 1","title":"Model Functions","text":"","category":"section"},{"location":"example1/","page":"Example 1","title":"Example 1","text":"For convienence, we can define two functions–-one to compute the marginal probability of a and another to compute the joint probablity of a and b","category":"page"},{"location":"example1/","page":"Example 1","title":"Example 1","text":"compute_a(m) = compute_marginal(m, m.Θs.ab + m.Θs.anb)\ncompute_ab(m) = compute_marginal(m, m.Θs.ab)","category":"page"},{"location":"example1/#Using-the-Model","page":"Example 1","title":"Using the Model","text":"","category":"section"},{"location":"example1/","page":"Example 1","title":"Example 1","text":"Now that we have set up the model and defined functions to compute the desired predictions, we can use the model. The predicted probability of a is computed as:","category":"page"},{"location":"example1/","page":"Example 1","title":"Example 1","text":"pa = compute_a(model)","category":"page"},{"location":"example1/","page":"Example 1","title":"Example 1","text":"The predicted probability of a and b is computed as:","category":"page"},{"location":"example1/","page":"Example 1","title":"Example 1","text":"pab = compute_ab(model)","category":"page"},{"location":"#BayesianSamplerModel.jl","page":"Home","title":"BayesianSamplerModel.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation under construction","category":"page"},{"location":"","page":"Home","title":"Home","text":"A Julia implementation of the probability judment model called the Bayesian Sampler. ","category":"page"},{"location":"#Simple-Example","page":"Home","title":"Simple Example","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using BayesianSamplerModel\nΘs = [.25 .15; .3 .3]\nmodel = BSM(; Θs, β=1.0, n=10, n′=10)\np_a = compute_marginal(model, sum(Θs[1,:]))\np_ab = compute_joint(model, Θs[1])\np_agb = compute_conditional(model, sum(Θs[1]) / sum(Θs[:,1]))","category":"page"},{"location":"#References","page":"Home","title":"References","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Zhu, J. Q., Sanborn, A. N., & Chater, N. (2020). The Bayesian sampler: Generic Bayesian inference causes incoherence in human probability judgments. Psychological Review, 127(5), 719.","category":"page"}]
}
